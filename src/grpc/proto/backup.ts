// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: proto/backup.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "backup";

export enum Provider {
  UNKNOWN = 0,
  POSTGRES = 1,
  MYSQL = 2,
  MONGODB = 3,
  UNRECOGNIZED = -1,
}

export interface Status {
  message: string;
}

export interface FindByIdRequest {
  id: string;
}

export interface BackupFile {
  id: string;
  dbName: string;
  fileName: string;
  path: string;
  size: string;
  createdAt: string;
  provider: Provider;
}

export interface GetBackupRequest {
  offset?: number | undefined;
  limit?: number | undefined;
  dbName: string;
  startDate?: string | undefined;
  endDate?: string | undefined;
  provider: Provider;
}

export interface GetBackupResponse {
  files: BackupFile[];
  total: number;
}

export interface DumpRequest {
  url: string;
  provider: Provider;
}

export interface RestoreRequest {
  url: string;
  provider: Provider;
  id: string;
}

export const BACKUP_PACKAGE_NAME = "backup";

export interface BackupClient {
  findAll(request: GetBackupRequest): Observable<GetBackupResponse>;

  findById(request: FindByIdRequest): Observable<BackupFile>;

  dump(request: DumpRequest): Observable<BackupFile>;

  restore(request: RestoreRequest): Observable<Status>;
}

export interface BackupController {
  findAll(request: GetBackupRequest): Promise<GetBackupResponse> | Observable<GetBackupResponse> | GetBackupResponse;

  findById(request: FindByIdRequest): Promise<BackupFile> | Observable<BackupFile> | BackupFile;

  dump(request: DumpRequest): Promise<BackupFile> | Observable<BackupFile> | BackupFile;

  restore(request: RestoreRequest): Promise<Status> | Observable<Status> | Status;
}

export function BackupControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAll", "findById", "dump", "restore"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("Backup", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("Backup", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BACKUP_SERVICE_NAME = "Backup";
