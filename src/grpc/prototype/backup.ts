/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: backup.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace backup {
    export class BackupFile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            dbName?: string;
            fileName?: string;
            path?: string;
            size?: string;
            createdAt?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("dbName" in data && data.dbName != undefined) {
                    this.dbName = data.dbName;
                }
                if ("fileName" in data && data.fileName != undefined) {
                    this.fileName = data.fileName;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get dbName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set dbName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get fileName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set fileName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set size(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set createdAt(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            dbName?: string;
            fileName?: string;
            path?: string;
            size?: string;
            createdAt?: number;
        }): BackupFile {
            const message = new BackupFile({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.dbName != null) {
                message.dbName = data.dbName;
            }
            if (data.fileName != null) {
                message.fileName = data.fileName;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                dbName?: string;
                fileName?: string;
                path?: string;
                size?: string;
                createdAt?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.dbName != null) {
                data.dbName = this.dbName;
            }
            if (this.fileName != null) {
                data.fileName = this.fileName;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.dbName.length)
                writer.writeString(2, this.dbName);
            if (this.fileName.length)
                writer.writeString(3, this.fileName);
            if (this.path.length)
                writer.writeString(4, this.path);
            if (this.size.length)
                writer.writeString(5, this.size);
            if (this.createdAt != 0)
                writer.writeInt64(6, this.createdAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BackupFile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BackupFile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.dbName = reader.readString();
                        break;
                    case 3:
                        message.fileName = reader.readString();
                        break;
                    case 4:
                        message.path = reader.readString();
                        break;
                    case 5:
                        message.size = reader.readString();
                        break;
                    case 6:
                        message.createdAt = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BackupFile {
            return BackupFile.deserialize(bytes);
        }
    }
    export class GetBackupRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offset?: number;
            limit?: number;
            dbName?: string;
            startDate?: number;
            endDate?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("dbName" in data && data.dbName != undefined) {
                    this.dbName = data.dbName;
                }
                if ("startDate" in data && data.startDate != undefined) {
                    this.startDate = data.startDate;
                }
                if ("endDate" in data && data.endDate != undefined) {
                    this.endDate = data.endDate;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get dbName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set dbName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get startDate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set startDate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get endDate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set endDate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            offset?: number;
            limit?: number;
            dbName?: string;
            startDate?: number;
            endDate?: number;
        }): GetBackupRequest {
            const message = new GetBackupRequest({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.dbName != null) {
                message.dbName = data.dbName;
            }
            if (data.startDate != null) {
                message.startDate = data.startDate;
            }
            if (data.endDate != null) {
                message.endDate = data.endDate;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                limit?: number;
                dbName?: string;
                startDate?: number;
                endDate?: number;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.dbName != null) {
                data.dbName = this.dbName;
            }
            if (this.startDate != null) {
                data.startDate = this.startDate;
            }
            if (this.endDate != null) {
                data.endDate = this.endDate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeInt32(1, this.offset);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (this.dbName.length)
                writer.writeString(3, this.dbName);
            if (this.startDate != 0)
                writer.writeInt64(4, this.startDate);
            if (this.endDate != 0)
                writer.writeInt64(5, this.endDate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBackupRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBackupRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    case 3:
                        message.dbName = reader.readString();
                        break;
                    case 4:
                        message.startDate = reader.readInt64();
                        break;
                    case 5:
                        message.endDate = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBackupRequest {
            return GetBackupRequest.deserialize(bytes);
        }
    }
    export class GetBackupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            files?: BackupFile[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, BackupFile, 1) as BackupFile[];
        }
        set files(value: BackupFile[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            files?: ReturnType<typeof BackupFile.prototype.toObject>[];
            total?: number;
        }): GetBackupResponse {
            const message = new GetBackupResponse({});
            if (data.files != null) {
                message.files = data.files.map(item => BackupFile.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                files?: ReturnType<typeof BackupFile.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.files != null) {
                data.files = this.files.map((item: BackupFile) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.files.length)
                writer.writeRepeatedMessage(1, this.files, (item: BackupFile) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBackupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBackupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BackupFile.deserialize(reader), BackupFile));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBackupResponse {
            return GetBackupResponse.deserialize(bytes);
        }
    }
    export class DumpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            host?: string;
            port?: string;
            dbName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("dbName" in data && data.dbName != undefined) {
                    this.dbName = data.dbName;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set port(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get dbName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set dbName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            host?: string;
            port?: string;
            dbName?: string;
        }): DumpRequest {
            const message = new DumpRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.dbName != null) {
                message.dbName = data.dbName;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                host?: string;
                port?: string;
                dbName?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.dbName != null) {
                data.dbName = this.dbName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.host.length)
                writer.writeString(3, this.host);
            if (this.port.length)
                writer.writeString(4, this.port);
            if (this.dbName.length)
                writer.writeString(5, this.dbName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DumpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DumpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.host = reader.readString();
                        break;
                    case 4:
                        message.port = reader.readString();
                        break;
                    case 5:
                        message.dbName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DumpRequest {
            return DumpRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBackupService {
        static definition = {
            FindAll: {
                path: "/backup.Backup/FindAll",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetBackupRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetBackupRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetBackupResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetBackupResponse.deserialize(new Uint8Array(bytes))
            },
            Dump: {
                path: "/backup.Backup/Dump",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DumpRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DumpRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BackupFile) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BackupFile.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract FindAll(call: grpc_1.ServerUnaryCall<GetBackupRequest, GetBackupResponse>, callback: grpc_1.sendUnaryData<GetBackupResponse>): void;
        abstract Dump(call: grpc_1.ServerUnaryCall<DumpRequest, BackupFile>, callback: grpc_1.sendUnaryData<BackupFile>): void;
    }
    export class BackupClient extends grpc_1.makeGenericClientConstructor(UnimplementedBackupService.definition, "Backup", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        FindAll: GrpcUnaryServiceInterface<GetBackupRequest, GetBackupResponse> = (message: GetBackupRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetBackupResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetBackupResponse>, callback?: grpc_1.requestCallback<GetBackupResponse>): grpc_1.ClientUnaryCall => {
            return super.FindAll(message, metadata, options, callback);
        };
        Dump: GrpcUnaryServiceInterface<DumpRequest, BackupFile> = (message: DumpRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BackupFile>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BackupFile>, callback?: grpc_1.requestCallback<BackupFile>): grpc_1.ClientUnaryCall => {
            return super.Dump(message, metadata, options, callback);
        };
    }
}
